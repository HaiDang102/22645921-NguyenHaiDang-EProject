name: Microservices CI/CD with Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 🧪 Job 1: Test các services
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      
      rabbitmq:
        image: rabbitmq:3.8-management-alpine
        ports:
          - 5672:5672

    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: npm test --if-present || echo "No test for ${{ matrix.service }}"

      - name: Build
        working-directory: ./${{ matrix.service }}
        run: npm run build --if-present

  # 🐳 Job 2: Build và Push Docker Images
  docker-build-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [auth, order, product, api-gateway]
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker Hub secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is not configured."
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && [ -z "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
            echo "Error: Neither DOCKERHUB_TOKEN nor DOCKERHUB_PASSWORD secrets are configured."
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}-cicd:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service }}-cicd:${{ github.sha }}

  # 🚀 Job 3: Deploy với Docker Compose
  deploy:
    needs: docker-build-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4

      - name: Validate Docker Hub secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
            echo "Error: DOCKERHUB_USERNAME secret is not configured."
            exit 1
          fi
          if [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && [ -z "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
            echo "Error: Neither DOCKERHUB_TOKEN nor DOCKERHUB_PASSWORD secrets are configured."
            exit 1
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN || secrets.DOCKERHUB_PASSWORD }}

      - name: Create production compose file
        run: |
          cat > docker-compose.prod.yml << 'EOF'
          version: "3.9"
          services:
            auth:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/auth-cicd:latest
              container_name: 'auth-cicd'
              ports:
                - "3000:3000"
              networks:
                - cicd-network

            order:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/order-cicd:latest
              container_name: 'order-cicd'
              ports:
                - "3001:3001"
              networks:
                - cicd-network

            product:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/product-cicd:latest
              container_name: 'product-cicd'
              ports:
                - "3002:3002"
              networks:
                - cicd-network

            api-gateway:
              image: ${{ secrets.DOCKERHUB_USERNAME }}/api-gateway-cicd:latest
              container_name: 'api-gateway-cicd'
              ports:
                - "8080:8080"
              depends_on:
                - auth
                - order
                - product
              networks:
                - cicd-network

            rabbitmq:
              image: rabbitmq:3.8-management-alpine
              container_name: 'rabbitmq-cicd'
              ports:
                - "5672:5672"
                - "15672:15672"

          networks:
            cicd-network:
              driver: bridge
          EOF

      - name: Deploy containers
        run: docker compose -f docker-compose.prod.yml up -d